{
  "name": "cheerio-httpcli",
  "version": "0.1.3",
  "description": "html client module with cheerio & iconv",
  "main": "index.js",
  "scripts": {
    "test": "vows --spec"
  },
  "dependencies": {
    "request": ">=2.1.4",
    "cheerio": ">=0.10.0",
    "iconv": ">=2.0.0"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ktty1220/cheerio-httpcli.git"
  },
  "keywords": [
    "cheerio",
    "http",
    "dom",
    "scrape"
  ],
  "author": {
    "name": "ktty1220",
    "email": "ktty1220@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# cheerio-httpcli\n\n#### iconvによる文字コード変換とcheerioによるHTMLパースを組み込んだNode.js用HTTPクライアントモジュール\n\nNode.jsでWEBページのスクレイピングを行う際に必要となる文字コードの変換とHTMLのパースを行った後のオブジェクトを取得できるHTTPクライアントモジュールです。\n\nWEBページの取得には[request](https://npmjs.org/package/request)、文字コードの変換には[iconv](https://npmjs.org/package/iconv)、HTMLのパースには[cheerio](https://npmjs.org/package/cheerio)を使用しています。\n\ncheerioはHTMLをjQueryライクにパースしてくれるモジュールです。パース後のオブジェクトを格納する変数名を「$」にすると、`$('title').text()`のようなjQueryそのままの形で要素の情報を取得できます。\n\n## インストール\n\n    npm install cheerio-httpcli\n\n## メソッド\n\n### fetch(url[, get-param], callback)\n\n`url`で指定したWEBページをGETメソッドで取得し、文字コードの変換とHTMLパースを行い`callback`に返します。\n\n`callback`には以下の3つの引数が渡されます。\n\n1. Errorオブジェクト\n2. `cheerio.load()`でHTMLコンテンツをパースしたオブジェクト\n3. requestモジュールの`response`オブジェクト\n\nGET時にパラメータを付加する場合は、`get-param`に連想配列で指定します。\n\n#### サンプル\n\n    var client = require('cheerio-httpcli');\n\n    // Googleで「node.js」について検索する。\n    client.fetch('http://www.google.com/search', { q: 'node.js' }, function (err, $, res) {\n      // レスポンスヘッダを参照\n      console.log(res.headers);\n\n      // HTMLタイトルを表示\n      console.log($('title').text());\n\n      // リンク一覧を表示\n      $('a').each(function (idx) {\n        console.log($(this).attr('href'));\n      });\n    });\n\n同梱の「example.js」はGoogle検索結果の一覧を取得するサンプルです。参考にしてください。\n\n## プロパティ\n\n### headers\n\nrequestモジュールで使用するリクエストヘッダ情報の連想配列です。デフォルトでは`User-Agent`のみIE9の情報を指定しています。\n\n### timeout\n\nrequestモジュールで指定するタイムアウト情報です。デフォルトでは30秒となっています。\n\n### gzip\n\nサーバーとの通信にgzip転送を使用するかどうかを真偽値で指定します。デフォルトは`true`(gzip転送する)です。\n\n## その他\n\n* 文字コードの判別は`<head>`タグのcharset情報を参照しています。charsetで指定された文字コードとWEBページの実際の文字コードが異なる場合は変換エラーとなります。\n* iconv-jpがインストールされていればそちらを優先して使用します。\n\n## Changelog\n\n### 0.1.3 (2013-09-09)\n\n* エラーオブジェクトに呼び出し時にセットした`param`を追加\n\n### 0.1.2 (2013-09-06)\n\n* リクエストヘッダのHostを自動でセットするようにした\n* gzip転送オプション追加\n* `fetch()`のcallbackの第3引数にrequestモジュールの`response`オブジェクトを追加\n* HTTPステータスコードが200以外によるエラーでもコンテンツを取得するようにした\n\n### 0.1.1 (2013-04-11)\n\n* charset=xxxというようにダブル(or シングル)クォーテーションがない場合に文字コードの判定に失敗するケースを修正\n\n### 0.1.0 (2013-03-18)\n\n* 初版リリース\n\n## ライセンス\n\n[MIT license](http://www.opensource.org/licenses/mit-license)で配布します。\n\n&copy; 2013 [ktty1220](mailto:ktty1220@gmail.com)\n",
  "bugs": {
    "url": "https://github.com/ktty1220/cheerio-httpcli/issues"
  },
  "homepage": "https://github.com/ktty1220/cheerio-httpcli",
  "_id": "cheerio-httpcli@0.1.3",
  "_shasum": "5d348e5c1729e6e803521b9917ea06528a8b7014",
  "_from": "cheerio-httpcli@",
  "_resolved": "https://registry.npmjs.org/cheerio-httpcli/-/cheerio-httpcli-0.1.3.tgz"
}
