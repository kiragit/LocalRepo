package com.mikankui.hanasite.kakeibo.test.util;import java.io.IOException;import java.util.List;import android.content.Context;import android.test.InstrumentationTestCase;import com.mikankui.hanasite.kakeibo.util.SqlFileUtil;public class CK_SqlFileUtil extends InstrumentationTestCase {		String OKcase0001 = "testdataOK0001";	String OKcase0002 = "testdataOK0002";	String OKcase0003 = "testdataOK0003";	String OKcase0004 = "testdataOK0004";	String NGcase0001 = "testdata";	String NGcase0002 = "testdataNG0002";	private static Context cntext;	protected static void setUpBeforeClass() throws Exception {	}	protected static void tearDownAfterClass() throws Exception {	}	protected void setUp() throws Exception {		super.setUp();		cntext = getApplicationContext();	}	protected void tearDown() throws Exception {		super.tearDown();	}		/**	 * Contextを返す用	 * @return	 */    private Context getApplicationContext() {        return this.getInstrumentation().getTargetContext().getApplicationContext();    }	/*	 * 正常系	 * Case 0001 ディレクトリ以下のファイルが１つ、SQLが１つ	 * Case 0002 ディレクトリ以下のファイルが１つ、SQLが３つ	 * Case 0003 ディレクトリ以下のファイルが３つ、SQLが１つづつ	 * Case 0004 ディレクトリ以下のファイルが３つ、SQLが３つづつ	 * 	 * 異常系	 * Case 0001 指定したディレクトリが無い場合	 * Case 0002 指定したディレクトリにファイルが無い場合	 * 	 */	/**	 * 正常	 * Case 0001 ディレクトリ以下のファイルが１つ、SQLが１つ	 * @throws IOException 	 */	public void testReadSqlFile_正常_1ディレクトリ１SQL() throws IOException {		List list;		list = SqlFileUtil.readSqlFile(cntext, OKcase0001);		assertEquals(list.size() ,1);	}		/**	 * 正常	 * Case 0002 ディレクトリ以下のファイルが１つ、SQLが3つ	 * @throws IOException 	 */	public void testReadSqlFile_正常_testReadSqlFile_1ディレクトリ3SQL() throws IOException {		List list;		list = SqlFileUtil.readSqlFile(cntext, OKcase0002);		assertEquals(list.size() ,3);	}	/**	 * 正常	 * Case 0003 ディレクトリ以下のファイルが3つ、SQLが1つ1づつ	 * @throws IOException 	 */	public void testReadSqlFile_正常_testReadSqlFile_3ディレクトリ1SQL() throws IOException {		List list;		list = SqlFileUtil.readSqlFile(cntext, OKcase0003);		assertEquals(list.size() ,3);	}		/**	 * 正常	 * Case 0004 ディレクトリ以下のファイルが3つ、SQLが1つ1づつ	 * @throws IOException 	 */	public void testReadSqlFile_正常_testReadSqlFile_3ディレクトリ3SQL() throws IOException {		List list;		list = SqlFileUtil.readSqlFile(cntext, OKcase0004);		assertEquals(list.size() ,9);	}		/**	 * 異常	 * Case 0001 ディレクトリなし	 */	public void testReadSqlFile_異常_testReadSqlFile_ディレクトリなし() {		List list;		try{		list = SqlFileUtil.readSqlFile(cntext, NGcase0001);		fail();		}catch(IOException e){			assertTrue(true);		}	}		/**	 * 異常	 * Case 0002 ファイルなし	 */	public void testReadSqlFile_異常_testReadSqlFile_ファイルなし() {		List list;		try{		list = SqlFileUtil.readSqlFile(cntext, NGcase0002);		fail();		}catch(IOException e){			assertTrue(true);		}	}}